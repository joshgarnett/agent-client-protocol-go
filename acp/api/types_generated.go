// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package api

// Capabilities supported by the agent.
//
// Advertised during initialization to inform the client about
// available features and content types.
//
// See protocol docs: [Agent
// Capabilities](https://agentclientprotocol.com/protocol/initialization#agent-capabilities)
type AgentCapabilities struct {
	// Whether the agent supports `session/load`.
	LoadSession bool `json:"loadSession,omitempty" yaml:"loadSession,omitempty"`

	// Prompt capabilities supported by the agent.
	PromptCapabilities PromptCapabilities `json:"promptCapabilities,omitempty" yaml:"promptCapabilities,omitempty"`
}

// All possible notifications that an agent can send to a client.
//
// This enum is used internally for routing RPC notifications. You typically won't
// need
// to use this directly - use the notification methods on the [`Client`] trait
// instead.
//
// Notifications do not expect a response.
type AgentNotification interface{}

// All possible requests that an agent can send to a client.
//
// This enum is used internally for routing RPC requests. You typically won't need
// to use this directly - instead, use the methods on the [`Client`] trait.
//
// This enum encompasses all method calls from agent to client.
type AgentRequest interface{}

// All possible responses that an agent can send to a client.
//
// This enum is used internally for routing RPC responses. You typically won't need
// to use this directly - the responses are handled automatically by the
// connection.
//
// These are responses to the corresponding ClientRequest variants.
type AgentResponse interface{}

// Optional annotations for the client. The client can use annotations to inform
// how objects are used or displayed
type Annotations struct {
	// Audience corresponds to the JSON schema field "audience".
	Audience []Role `json:"audience,omitempty" yaml:"audience,omitempty"`

	// LastModified corresponds to the JSON schema field "lastModified".
	LastModified *string `json:"lastModified,omitempty" yaml:"lastModified,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *float64 `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// Audio provided to or from an LLM.
type AudioContent struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations *AudioContentAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty"`

	// Data corresponds to the JSON schema field "data".
	Data string `json:"data" yaml:"data"`

	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType string `json:"mimeType" yaml:"mimeType"`
}

// Optional annotations for the client. The client can use annotations to inform
// how objects are used or displayed
type AudioContentAnnotations struct {
	// Audience corresponds to the JSON schema field "audience".
	Audience []Role `json:"audience,omitempty" yaml:"audience,omitempty"`

	// LastModified corresponds to the JSON schema field "lastModified".
	LastModified *string `json:"lastModified,omitempty" yaml:"lastModified,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *float64 `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// Describes an available authentication method.
type AuthMethod struct {
	// Optional description providing more details about this authentication method.
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// Unique identifier for this authentication method.
	Id AuthMethodId `json:"id" yaml:"id"`

	// Human-readable name of the authentication method.
	Name string `json:"name" yaml:"name"`
}

// Unique identifier for an authentication method.
type AuthMethodId string

// Request parameters for the authenticate method.
//
// Specifies which authentication method to use.
type AuthenticateRequest struct {
	// The ID of the authentication method to use.
	// Must be one of the methods advertised in the initialize response.
	MethodId AuthMethodId `json:"methodId" yaml:"methodId"`
}

// Information about a command.
type AvailableCommand struct {
	// Human-readable description of what the command does.
	Description string `json:"description" yaml:"description"`

	// Input for the command if required
	Input interface{} `json:"input,omitempty" yaml:"input,omitempty"`

	// Command name (e.g., "create_plan", "research_codebase").
	Name string `json:"name" yaml:"name"`
}

// All text that was typed after the command name is provided as input.
type AvailableCommandInput struct {
	// A brief description of the expected input
	Hint string `json:"hint" yaml:"hint"`
}

// All text that was typed after the command name is provided as input.
type AvailableCommandInput_0 struct {
	// A brief description of the expected input
	Hint string `json:"hint" yaml:"hint"`
}

// Binary resource contents.
type BlobResourceContents struct {
	// Blob corresponds to the JSON schema field "blob".
	Blob string `json:"blob" yaml:"blob"`

	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType *string `json:"mimeType,omitempty" yaml:"mimeType,omitempty"`

	// Uri corresponds to the JSON schema field "uri".
	Uri string `json:"uri" yaml:"uri"`
}

// Notification to cancel ongoing operations for a session.
//
// See protocol docs:
// [Cancellation](https://agentclientprotocol.com/protocol/prompt-turn#cancellation)
type CancelNotification struct {
	// The ID of the session to cancel operations for.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}

// Capabilities supported by the client.
//
// Advertised during initialization to inform the agent about
// available features and methods.
//
// See protocol docs: [Client
// Capabilities](https://agentclientprotocol.com/protocol/initialization#client-capabilities)
type ClientCapabilities struct {
	// File system capabilities supported by the client.
	// Determines which file operations the agent can request.
	Fs FileSystemCapability `json:"fs,omitempty" yaml:"fs,omitempty"`

	// **UNSTABLE**
	//
	// This capability is not part of the spec yet, and may be removed or changed at
	// any point.
	Terminal bool `json:"terminal,omitempty" yaml:"terminal,omitempty"`
}

// All possible notifications that a client can send to an agent.
//
// This enum is used internally for routing RPC notifications. You typically won't
// need
// to use this directly - use the notification methods on the [`Agent`] trait
// instead.
//
// Notifications do not expect a response.
type ClientNotification interface{}

// All possible requests that a client can send to an agent.
//
// This enum is used internally for routing RPC requests. You typically won't need
// to use this directly - instead, use the methods on the [`Agent`] trait.
//
// This enum encompasses all method calls from client to agent.
type ClientRequest interface{}

// All possible responses that a client can send to an agent.
//
// This enum is used internally for routing RPC responses. You typically won't need
// to use this directly - the responses are handled automatically by the
// connection.
//
// These are responses to the corresponding AgentRequest variants.
type ClientResponse interface{}

// Content blocks represent displayable information in the Agent Client Protocol.
//
// They provide a structured way to handle various types of user-facing
// contentâ€”whether
// it's text from language models, images for analysis, or embedded resources for
// context.
//
// Content blocks appear in:
// - User prompts sent via `session/prompt`
// - Language model output streamed through `session/update` notifications
// - Progress updates and results from tool calls
//
// This structure is compatible with the Model Context Protocol (MCP), enabling
// agents to seamlessly forward content from MCP tool outputs without
// transformation.
//
// See protocol docs: [Content](https://agentclientprotocol.com/protocol/content)
type CreateTerminalRequest struct {
	// Args corresponds to the JSON schema field "args".
	Args []string `json:"args,omitempty" yaml:"args,omitempty"`

	// Command corresponds to the JSON schema field "command".
	Command string `json:"command" yaml:"command"`

	// Cwd corresponds to the JSON schema field "cwd".
	Cwd *string `json:"cwd,omitempty" yaml:"cwd,omitempty"`

	// Env corresponds to the JSON schema field "env".
	Env []EnvVariable `json:"env,omitempty" yaml:"env,omitempty"`

	// OutputByteLimit corresponds to the JSON schema field "outputByteLimit".
	OutputByteLimit *int `json:"outputByteLimit,omitempty" yaml:"outputByteLimit,omitempty"`

	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}

type CreateTerminalResponse struct {
	// TerminalId corresponds to the JSON schema field "terminalId".
	TerminalId string `json:"terminalId" yaml:"terminalId"`
}

// The contents of a resource, embedded into a prompt or tool call result.
type EmbeddedResource struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations *EmbeddedResourceAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty"`

	// Resource corresponds to the JSON schema field "resource".
	Resource EmbeddedResourceResource `json:"resource" yaml:"resource"`
}

// Optional annotations for the client. The client can use annotations to inform
// how objects are used or displayed
type EmbeddedResourceAnnotations struct {
	// Audience corresponds to the JSON schema field "audience".
	Audience []Role `json:"audience,omitempty" yaml:"audience,omitempty"`

	// LastModified corresponds to the JSON schema field "lastModified".
	LastModified *string `json:"lastModified,omitempty" yaml:"lastModified,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *float64 `json:"priority,omitempty" yaml:"priority,omitempty"`
}

type EmbeddedResourceResource interface{}

// Resource content that can be embedded in a message.
type EmbeddedResourceResource_1 interface{}

// An environment variable to set when launching an MCP server.
type EnvVariable struct {
	// The name of the environment variable.
	Name string `json:"name" yaml:"name"`

	// The value to set for the environment variable.
	Value string `json:"value" yaml:"value"`
}

// File system capabilities that a client may support.
//
// See protocol docs:
// [FileSystem](https://agentclientprotocol.com/protocol/initialization#filesystem)
type FileSystemCapability struct {
	// Whether the Client supports `fs/read_text_file` requests.
	ReadTextFile bool `json:"readTextFile,omitempty" yaml:"readTextFile,omitempty"`

	// Whether the Client supports `fs/write_text_file` requests.
	WriteTextFile bool `json:"writeTextFile,omitempty" yaml:"writeTextFile,omitempty"`
}

// An image provided to or from an LLM.
type ImageContent struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations *ImageContentAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty"`

	// Data corresponds to the JSON schema field "data".
	Data string `json:"data" yaml:"data"`

	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType string `json:"mimeType" yaml:"mimeType"`

	// Uri corresponds to the JSON schema field "uri".
	Uri *string `json:"uri,omitempty" yaml:"uri,omitempty"`
}

// Optional annotations for the client. The client can use annotations to inform
// how objects are used or displayed
type ImageContentAnnotations struct {
	// Audience corresponds to the JSON schema field "audience".
	Audience []Role `json:"audience,omitempty" yaml:"audience,omitempty"`

	// LastModified corresponds to the JSON schema field "lastModified".
	LastModified *string `json:"lastModified,omitempty" yaml:"lastModified,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *float64 `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// Request parameters for the initialize method.
//
// Sent by the client to establish connection and negotiate capabilities.
//
// See protocol docs:
// [Initialization](https://agentclientprotocol.com/protocol/initialization)
type InitializeRequest struct {
	// Capabilities supported by the client.
	ClientCapabilities ClientCapabilities `json:"clientCapabilities,omitempty" yaml:"clientCapabilities,omitempty"`

	// The latest protocol version supported by the client.
	ProtocolVersion ProtocolVersion `json:"protocolVersion" yaml:"protocolVersion"`
}

// Response from the initialize method.
//
// Contains the negotiated protocol version and agent capabilities.
//
// See protocol docs:
// [Initialization](https://agentclientprotocol.com/protocol/initialization)
type InitializeResponse struct {
	// Capabilities supported by the agent.
	AgentCapabilities AgentCapabilities `json:"agentCapabilities,omitempty" yaml:"agentCapabilities,omitempty"`

	// Authentication methods supported by the agent.
	AuthMethods []AuthMethod `json:"authMethods,omitempty" yaml:"authMethods,omitempty"`

	// The protocol version the client specified if supported by the agent,
	// or the latest protocol version supported by the agent.
	//
	// The client should disconnect, if it doesn't support this version.
	ProtocolVersion ProtocolVersion `json:"protocolVersion" yaml:"protocolVersion"`
}

type KillTerminalRequest struct {
	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`

	// TerminalId corresponds to the JSON schema field "terminalId".
	TerminalId string `json:"terminalId" yaml:"terminalId"`
}

// Request parameters for loading an existing session.
//
// Only available if the agent supports the `loadSession` capability.
//
// See protocol docs: [Loading
// Sessions](https://agentclientprotocol.com/protocol/session-setup#loading-sessions)
type LoadSessionRequest struct {
	// The working directory for this session.
	Cwd string `json:"cwd" yaml:"cwd"`

	// List of MCP servers to connect to for this session.
	McpServers []McpServer `json:"mcpServers" yaml:"mcpServers"`

	// The ID of the session to load.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}

// Configuration for connecting to an MCP (Model Context Protocol) server.
//
// MCP servers provide tools and context that the agent can use when
// processing prompts.
//
// See protocol docs: [MCP
// Servers](https://agentclientprotocol.com/protocol/session-setup#mcp-servers)
type McpServer struct {
	// Command-line arguments to pass to the MCP server.
	Args []string `json:"args" yaml:"args"`

	// Path to the MCP server executable.
	Command string `json:"command" yaml:"command"`

	// Environment variables to set when launching the MCP server.
	Env []EnvVariable `json:"env" yaml:"env"`

	// Human-readable name identifying this MCP server.
	Name string `json:"name" yaml:"name"`
}

// Request parameters for creating a new session.
//
// See protocol docs: [Creating a
// Session](https://agentclientprotocol.com/protocol/session-setup#creating-a-session)
type NewSessionRequest struct {
	// The working directory for this session. Must be an absolute path.
	Cwd string `json:"cwd" yaml:"cwd"`

	// List of MCP (Model Context Protocol) servers the agent should connect to.
	McpServers []McpServer `json:"mcpServers" yaml:"mcpServers"`
}

// Response from creating a new session.
//
// See protocol docs: [Creating a
// Session](https://agentclientprotocol.com/protocol/session-setup#creating-a-session)
type NewSessionResponse struct {
	// **UNSTABLE**
	//
	// Commands that may be executed via `session/prompt` requests
	AvailableCommands []AvailableCommand `json:"availableCommands,omitempty" yaml:"availableCommands,omitempty"`

	// Unique identifier for the created session.
	//
	// Used in all subsequent requests for this conversation.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}

// An option presented to the user when requesting permission.
type PermissionOption struct {
	// Hint about the nature of this permission option.
	Kind PermissionOptionKind `json:"kind" yaml:"kind"`

	// Human-readable label to display to the user.
	Name string `json:"name" yaml:"name"`

	// Unique identifier for this permission option.
	OptionId PermissionOptionId `json:"optionId" yaml:"optionId"`
}

// Unique identifier for a permission option.
type PermissionOptionId string

// Hint about the nature of this permission option.
type Plan struct {
	// The list of tasks to be accomplished.
	//
	// When updating a plan, the agent must send a complete list of all entries
	// with their current status. The client replaces the entire plan with each
	// update.
	Entries []PlanEntry `json:"entries" yaml:"entries"`
}

// A single entry in the execution plan.
//
// Represents a task or goal that the assistant intends to accomplish
// as part of fulfilling the user's request.
// See protocol docs: [Plan
// Entries](https://agentclientprotocol.com/protocol/agent-plan#plan-entries)
type PlanEntry struct {
	// Human-readable description of what this task aims to accomplish.
	Content string `json:"content" yaml:"content"`

	// The relative importance of this task.
	// Used to indicate which tasks are most critical to the overall goal.
	Priority PlanEntryPriority `json:"priority" yaml:"priority"`

	// Current execution status of this task.
	Status PlanEntryStatus `json:"status" yaml:"status"`
}

// The relative importance of this task.
// Used to indicate which tasks are most critical to the overall goal.
type PromptCapabilities struct {
	// Agent supports [`ContentBlock::Audio`].
	Audio bool `json:"audio,omitempty" yaml:"audio,omitempty"`

	// Agent supports embedded context in `session/prompt` requests.
	//
	// When enabled, the Client is allowed to include [`ContentBlock::Resource`]
	// in prompt requests for pieces of context that are referenced in the message.
	EmbeddedContext bool `json:"embeddedContext,omitempty" yaml:"embeddedContext,omitempty"`

	// Agent supports [`ContentBlock::Image`].
	Image bool `json:"image,omitempty" yaml:"image,omitempty"`
}

// Request parameters for sending a user prompt to the agent.
//
// Contains the user's message and any additional context.
//
// See protocol docs: [User
// Message](https://agentclientprotocol.com/protocol/prompt-turn#1-user-message)
type PromptRequest struct {
	// The blocks of content that compose the user's message.
	//
	// As a baseline, the Agent MUST support [`ContentBlock::Text`] and
	// [`ContentBlock::ResourceLink`],
	// while other variants are optionally enabled via [`PromptCapabilities`].
	//
	// The Client MUST adapt its interface according to [`PromptCapabilities`].
	//
	// The client MAY include referenced pieces of context as either
	// [`ContentBlock::Resource`] or [`ContentBlock::ResourceLink`].
	//
	// When available, [`ContentBlock::Resource`] is preferred
	// as it avoids extra round-trips and allows the message to include
	// pieces of context from sources the agent may not have access to.
	Prompt []PromptRequestPromptElem `json:"prompt" yaml:"prompt"`

	// The ID of the session to send this user message to
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}

type PromptRequestPromptElem interface{}

// Response from processing a user prompt.
//
// See protocol docs: [Check for
// Completion](https://agentclientprotocol.com/protocol/prompt-turn#4-check-for-completion)
type PromptResponse struct {
	// Indicates why the agent stopped processing the turn.
	StopReason PromptResponseStopReason `json:"stopReason" yaml:"stopReason"`
}

// Indicates why the agent stopped processing the turn.
type PromptResponseStopReason interface{}

// Protocol version identifier.
//
// This version is only bumped for breaking changes.
// Non-breaking changes should be introduced via capabilities.
type ProtocolVersion int

// Request to read content from a text file.
//
// Only available if the client supports the `fs.readTextFile` capability.
type ReadTextFileRequest struct {
	// Optional maximum number of lines to read.
	Limit *int `json:"limit,omitempty" yaml:"limit,omitempty"`

	// Optional line number to start reading from (1-based).
	Line *int `json:"line,omitempty" yaml:"line,omitempty"`

	// Absolute path to the file to read.
	Path string `json:"path" yaml:"path"`

	// The session ID for this request.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}

// Response containing the contents of a text file.
type ReadTextFileResponse struct {
	// Content corresponds to the JSON schema field "content".
	Content string `json:"content" yaml:"content"`
}

type ReleaseTerminalRequest struct {
	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`

	// TerminalId corresponds to the JSON schema field "terminalId".
	TerminalId string `json:"terminalId" yaml:"terminalId"`
}

// The outcome of a permission request.
type RequestPermissionOutcome interface{}

// Request for user permission to execute a tool call.
//
// Sent when the agent needs authorization before performing a sensitive operation.
//
// See protocol docs: [Requesting
// Permission](https://agentclientprotocol.com/protocol/tool-calls#requesting-permission)
type RequestPermissionRequest struct {
	// Available permission options for the user to choose from.
	Options []PermissionOption `json:"options" yaml:"options"`

	// The session ID for this request.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`

	// Details about the tool call requiring permission.
	ToolCall ToolCallUpdate `json:"toolCall" yaml:"toolCall"`
}

// Response to a permission request.
type RequestPermissionResponse struct {
	// The user's decision on the permission request.
	Outcome RequestPermissionResponseOutcome `json:"outcome" yaml:"outcome"`
}

// The user's decision on the permission request.
type RequestPermissionResponseOutcome interface{}

// A resource that the server is capable of reading, included in a prompt or tool
// call result.
type ResourceLink struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations *ResourceLinkAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`

	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType *string `json:"mimeType,omitempty" yaml:"mimeType,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Size corresponds to the JSON schema field "size".
	Size *int `json:"size,omitempty" yaml:"size,omitempty"`

	// Title corresponds to the JSON schema field "title".
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`

	// Uri corresponds to the JSON schema field "uri".
	Uri string `json:"uri" yaml:"uri"`
}

// Optional annotations for the client. The client can use annotations to inform
// how objects are used or displayed
type ResourceLinkAnnotations struct {
	// Audience corresponds to the JSON schema field "audience".
	Audience []Role `json:"audience,omitempty" yaml:"audience,omitempty"`

	// LastModified corresponds to the JSON schema field "lastModified".
	LastModified *string `json:"lastModified,omitempty" yaml:"lastModified,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *float64 `json:"priority,omitempty" yaml:"priority,omitempty"`
}

type Role string

const RoleAssistant Role = "assistant"
const RoleUser Role = "user"

// A unique identifier for a conversation session between a client and agent.
//
// Sessions maintain their own context, conversation history, and state,
// allowing multiple independent interactions with the same agent.
//
// # Example
//
// ```
// use agent_client_protocol::SessionId;
// use std::sync::Arc;
//
// let session_id = SessionId(Arc::from("sess_abc123def456"));
// ```
//
// See protocol docs: [Session
// ID](https://agentclientprotocol.com/protocol/session-setup#session-id)
type SessionId string

// Notification containing a session update from the agent.
//
// Used to stream real-time progress and results during prompt processing.
//
// See protocol docs: [Agent Reports
// Output](https://agentclientprotocol.com/protocol/prompt-turn#3-agent-reports-output)
type SessionNotification struct {
	// The ID of the session this update pertains to.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`

	// The actual update content.
	Update SessionNotificationUpdate `json:"update" yaml:"update"`
}

// The actual update content.
type SessionNotificationUpdate interface{}

// Different types of updates that can be sent during session processing.
//
// These updates provide real-time feedback about the agent's progress.
//
// See protocol docs: [Agent Reports
// Output](https://agentclientprotocol.com/protocol/prompt-turn#3-agent-reports-output)
type TerminalExitStatus struct {
	// ExitCode corresponds to the JSON schema field "exitCode".
	ExitCode *int `json:"exitCode,omitempty" yaml:"exitCode,omitempty"`

	// Signal corresponds to the JSON schema field "signal".
	Signal *string `json:"signal,omitempty" yaml:"signal,omitempty"`
}

type TerminalOutputRequest struct {
	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`

	// TerminalId corresponds to the JSON schema field "terminalId".
	TerminalId string `json:"terminalId" yaml:"terminalId"`
}

type TerminalOutputResponse struct {
	// ExitStatus corresponds to the JSON schema field "exitStatus".
	ExitStatus *TerminalOutputResponseExitStatus `json:"exitStatus,omitempty" yaml:"exitStatus,omitempty"`

	// Output corresponds to the JSON schema field "output".
	Output string `json:"output" yaml:"output"`

	// Truncated corresponds to the JSON schema field "truncated".
	Truncated bool `json:"truncated" yaml:"truncated"`
}

type TerminalOutputResponseExitStatus struct {
	// ExitCode corresponds to the JSON schema field "exitCode".
	ExitCode *int `json:"exitCode,omitempty" yaml:"exitCode,omitempty"`

	// Signal corresponds to the JSON schema field "signal".
	Signal *string `json:"signal,omitempty" yaml:"signal,omitempty"`
}

// Text provided to or from an LLM.
type TextContent struct {
	// Annotations corresponds to the JSON schema field "annotations".
	Annotations *TextContentAnnotations `json:"annotations,omitempty" yaml:"annotations,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text"`
}

type ImageContentAnnotations_0 = Annotations

// A file location being accessed or modified by a tool.
//
// Enables clients to implement "follow-along" features that track
// which files the agent is working with in real-time.
//
// See protocol docs: [Following the
// Agent](https://agentclientprotocol.com/protocol/tool-calls#following-the-agent)
type ToolCallLocation struct {
	// Optional line number within the file.
	Line *int `json:"line,omitempty" yaml:"line,omitempty"`

	// The file path being accessed or modified.
	Path string `json:"path" yaml:"path"`
}

type ToolCallUpdateContentElem interface{}

type AudioContentAnnotations_0 = Annotations
type EmbeddedResourceAnnotations_0 = Annotations
type TerminalOutputResponseExitStatus_0 = TerminalExitStatus

// Text-based resource contents.
type TextResourceContents struct {
	// MimeType corresponds to the JSON schema field "mimeType".
	MimeType *string `json:"mimeType,omitempty" yaml:"mimeType,omitempty"`

	// Text corresponds to the JSON schema field "text".
	Text string `json:"text" yaml:"text"`

	// Uri corresponds to the JSON schema field "uri".
	Uri string `json:"uri" yaml:"uri"`
}

type ResourceLinkAnnotations_0 = Annotations
type TextContentAnnotations_0 = Annotations

// Unique identifier for a tool call within a session.
type ToolCallId string

// Optional annotations for the client. The client can use annotations to inform
// how objects are used or displayed
type TextContentAnnotations struct {
	// Audience corresponds to the JSON schema field "audience".
	Audience []Role `json:"audience,omitempty" yaml:"audience,omitempty"`

	// LastModified corresponds to the JSON schema field "lastModified".
	LastModified *string `json:"lastModified,omitempty" yaml:"lastModified,omitempty"`

	// Priority corresponds to the JSON schema field "priority".
	Priority *float64 `json:"priority,omitempty" yaml:"priority,omitempty"`
}

// An update to an existing tool call.
//
// Used to report progress and results as tools execute. All fields except
// the tool call ID are optional - only changed fields need to be included.
//
// See protocol docs:
// [Updating](https://agentclientprotocol.com/protocol/tool-calls#updating)
type ToolCallUpdate struct {
	// Replace the content collection.
	Content []ToolCallUpdateContentElem `json:"content,omitempty" yaml:"content,omitempty"`

	// Update the tool kind.
	Kind interface{} `json:"kind,omitempty" yaml:"kind,omitempty"`

	// Replace the locations collection.
	Locations []ToolCallLocation `json:"locations,omitempty" yaml:"locations,omitempty"`

	// Update the raw input.
	RawInput interface{} `json:"rawInput,omitempty" yaml:"rawInput,omitempty"`

	// Update the raw output.
	RawOutput interface{} `json:"rawOutput,omitempty" yaml:"rawOutput,omitempty"`

	// Update the execution status.
	Status interface{} `json:"status,omitempty" yaml:"status,omitempty"`

	// Update the human-readable title.
	Title *string `json:"title,omitempty" yaml:"title,omitempty"`

	// The ID of the tool call being updated.
	ToolCallId ToolCallId `json:"toolCallId" yaml:"toolCallId"`
}

type ToolCallContentElem interface{}

// The category of tool being invoked.
// Helps clients choose appropriate icons and UI treatment.
type ToolCallKind interface{}

// Current execution status of the tool call.
type ToolCall struct {
	// Content produced by the tool call.
	Content []ToolCallContentElem `json:"content,omitempty" yaml:"content,omitempty"`

	// The category of tool being invoked.
	// Helps clients choose appropriate icons and UI treatment.
	Kind ToolCallKind `json:"kind,omitempty" yaml:"kind,omitempty"`

	// File locations affected by this tool call.
	// Enables "follow-along" features in clients.
	Locations []ToolCallLocation `json:"locations,omitempty" yaml:"locations,omitempty"`

	// Raw input parameters sent to the tool.
	RawInput interface{} `json:"rawInput,omitempty" yaml:"rawInput,omitempty"`

	// Raw output returned by the tool.
	RawOutput interface{} `json:"rawOutput,omitempty" yaml:"rawOutput,omitempty"`

	// Current execution status of the tool call.
	Status ToolCallStatus `json:"status,omitempty" yaml:"status,omitempty"`

	// Human-readable title describing what the tool is doing.
	Title string `json:"title" yaml:"title"`

	// Unique identifier for this tool call within the session.
	ToolCallId ToolCallId `json:"toolCallId" yaml:"toolCallId"`
}

// Content produced by a tool call.
//
// Tool calls can produce different types of content including
// standard content blocks (text, images) or file diffs.
//
// See protocol docs:
// [Content](https://agentclientprotocol.com/protocol/tool-calls#content)
type WaitForTerminalExitRequest struct {
	// SessionId corresponds to the JSON schema field "sessionId".
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`

	// TerminalId corresponds to the JSON schema field "terminalId".
	TerminalId string `json:"terminalId" yaml:"terminalId"`
}

type WaitForTerminalExitResponse struct {
	// ExitCode corresponds to the JSON schema field "exitCode".
	ExitCode *int `json:"exitCode,omitempty" yaml:"exitCode,omitempty"`

	// Signal corresponds to the JSON schema field "signal".
	Signal *string `json:"signal,omitempty" yaml:"signal,omitempty"`
}

// Request to write content to a text file.
//
// Only available if the client supports the `fs.writeTextFile` capability.
type WriteTextFileRequest struct {
	// The text content to write to the file.
	Content string `json:"content" yaml:"content"`

	// Absolute path to the file to write.
	Path string `json:"path" yaml:"path"`

	// The session ID for this request.
	SessionId SessionId `json:"sessionId" yaml:"sessionId"`
}
